Entities
  Contracts
    IEntity{ id?: string }
    IUser{ name: string } extend IEntity

UseCases
  Contracts
    Commons
      (IEntity from Entities/Contracts/IEntity)
      IData() extend IEntity

      (IEntity from Entities/Contracts/IEntity)
      IInput()
        handle(): IEntity

      (IEntity from Entities/Contracts/IEntity)
      IOutput()
        handle(IEntity): null | Data | Data[]
      
      (IEntity from Entities/Contracts/IEntity)
      IRepository()
        handle(IEntity?): null | IEntity | IEntity[]

      IUseCase()
        handle(IInput): null | IData | IData[]

    User
      (IUser from Entities/Contracts/IUser)
      IEntity() extend IUser

      (ICommonsData from UseCases/Contracts/Commons/IData)
      IData() extend ICommonsData | null

      (ICommonsInput from UseCases/Contracts/Commons/IInput)
      IInpput() extend ICommonsInput
        handle(): IEntity

      (ICommonsOutput from UseCases/Contracts/Commons/IOutput)
      IOutput() extend ICommonsOutput
        handle(): IData

      INotificationService
        handle(IEntity): void

      (ICommonsRepository from UseCases/Contracts/Commons/IRepository)
      IRepositoryCreate extend ICommonsRepository
        handle(IEntity): IEntity | null

      (ICommonsUseCase from UseCases/Contracts/Commons/UseCase)
      IUseCaseCreate(IOutput, IRepositoryCreate) extend ICommonsUseCase
        handle(IInpput): IData | null

      (ICommonsUseCase from UseCases/Contracts/Commons/UseCase)
      IUseCaseSendNotification(INotificationService) extend ICommonsUseCase
        handle(IInpput): void

  User
    (
      Input from UseCases/Contracts/User/Input
      Entity from UseCases/Contracts/User/Entity
    )
    InputCreate(Entity) extend Input
      handle(): Entity

    (
      Input from UseCases/Contracts/User/Output
      Entity from UseCases/Contracts/User/Entity
      Data from UseCases/Contracts/User/Data
    )
    OutputCreate(Entity) extend Output
      handle(): Data | null

    (
      RepositoryCreate from UseCases/Contracts/User/RepositoryCreate
      IUseCaseCreate from UseCases/Contracts/User/UseCaseCreate
      Data from UseCases/Contracts/User/Data
    )
    UseCaseCreate(OutputCreate, RepositoryCreate) extend IUseCaseCreate
      handle(UseCases/Contracts/User/Input): Data | null

Controllers
  Web
    Contracts
      HttpData extend UseCases/Contracts/Commons/Data

      HttpOutput
        handle(): { status: number, data: null | HttpData | HttpData[] }

      HttpResponse()
        handle(HttpData): HttpOutput
    
    User
      HttpData(UseCases/Contracts/Commons/Data) extend Controllers/Web/Contracts/HttpData

      HttpOutput(UseCases/Contracts/Commons/Output) extend Controllers/Web/Contracts/HttpOutput
        handle(): any

      Controller(
        UseCases/Contracts/User/UseCaseCreate,

      )
        handle(): HttpOutput
            
Frameworks & Drives
  UseRepositoryMySql: UseRepository
  NotificationServiceEmail: NotificationService

Main
  webAdapter = AdapterWeb(DbUseCaseRegistration(UseRepositoryMySql, NotificationServiceEmail))
  UserPresenterJson(webAdapter) -> world

