Entities
  Contracts
    IEntity{ id?: string }()
    IUser{ name: string }() extends IEntity

UseCases
  Contracts
    Commons
      IData() extends unknown

      (IEntity from Entities/Contracts/IEntity)
      IInput{entity: IEntity}()<IEntity>
        handle(): IEntity

      (IEntity from Entities/Contracts/IEntity)
      IOutput{entity: IEntity}()<IEntity, IData>
        handle(): IData

      (IEntity from Entities/Contracts/IEntity)
      IRepository()<INEntity, OUTEntity>
        handle(INEntity?): OUTEntity

      (IEntity from Entities/Contracts/IEntity)
      IUseCase{repository: IRepository<IEntity, IEntity>}()<IInput, IOutput>
        handle(IInput): IOutput

    User
      (IUser from Entities/Contracts/IUser)
      IEntity() extends IUser

      (ICommonsData from UseCases/Contracts/Commons/IData)
      IData() extends ICommonsData

      (ICommonsInput from UseCases/Contracts/Commons/IInput)
      IInpput() extends ICommonsInput<IEntity>

      (ICommonsOutput from UseCases/Contracts/Commons/IOutput)
      IOutput() extends ICommonsOutput<IEntity, IData>

      (IRepository from UseCases/Contracts/Commons/IRepository)
      IRepositoryCreate()
        <INEntity = IEntity, OUTEntity = IEntity>
          extends
            IRepository<INEntity, OUTEntity>

      (ICommonsUseCase from UseCases/Contracts/Commons/UseCase)
      IUseCaseCreate() extends ICommonsUseCase<IInpput, IOutput>

  User
    (
      IInpput from UseCases/Contracts/User/IInpput
      IEntity from UseCases/Contracts/User/IEntity
    )
    InputCreate(entity: IEntity) implements IInpput
      handle(): IEntity

    (
      IOutput from UseCases/Contracts/User/IOutput
      IEntity from UseCases/Contracts/User/IEntity
      IData from UseCases/Contracts/User/IData
    )
    OutputCreate(entity: IEntity) implements IOutput
      handle(): IData

    (
      IRepository from UseCases/Contracts/Commons/IRepository
      IEntity from UseCases/Contracts/User/IEntity
      IInput from UseCases/Contracts/User/IInput
      IOutput from UseCases/Contracts/User/IOutput
      IUseCaseCreate from UseCases/Contracts/User/UseCaseCreate
    )
    UseCaseCreate(OutputCreate, IRepository<IEntity, IEntity>) implements IUseCaseCreate
      handle(IInput): IOutput

Applications
  Controllers
    Rest
      Contracts
          Commons
            IHttpOutputData{status: number, data: unknown}()

            IHttpOutputDataError{status: number, messge: string}()

            IHttpOutput()
              handle(status: number, data: unknown): IHttpOutputData

            IHttpOutputError()
              handle(status: number, messge: string): IHttpOutputDataError

            (IUseCase from UseCases/Contracts/Commons/IUseCase)
            IController{
              useCase: IUseCase
              httpOutput: IHttpOutput
              httpOutputError: IHttpOutputError
            }()
              handle(unknown): IHttpOutputData | IHttpOutputDataError

          User
            (IUserEntity from UseCases/Contracts/User/IEntity)
            IEntity() extends IUserEntity

            (IUserData from UseCases/Contracts/User/IData)
            IData() extends IUserData

            (ICommonsHttpOutput from Applications/Controllers/Rest/Contracts/Commons/IHttpOutput)
            IHttpOutput() extends ICommonsHttpOutput<IData>

            (ICommonsHttpOutputError from Applications/Controllers/Rest/Contracts/Commons/IHttpOutputError)
            IHttpOutputError() extends ICommonsHttpOutputError

            (IRepositoryCreate from UseCases/Contracts/User/IRepositoryCreate)
            IRepositoryCreate() extends IRepositoryCreate<IEntity, IEntity>

            (
              IUseCaseCreate from UseCases/Contracts/User/UseCaseCreate
              ICommonsControllerfrom Applications/Controllers/Rest/Contracts/Commons/IController
            )
            IControllerCreate{
              useCase: IUseCaseCreate
              httpOutput: IHttpOutput
              httpOutputError: IHttpOutputError
            }() extends ICommonsController<IHttpOutputData<IData>>

      User
        (
          IHttpOutput from Applications/Controllers/Rest/Contracts/User/IHttpOutput
        )
        HttpOutput implements IHttpOutput

        (
          IHttpOutputError from Applications/Controllers/Rest/Contracts/User/IHttpOutputError
        )
        HttpOutputError implements IHttpOutputError

        (IControllerCreate from Applications/Controllers/Rest/Contracts/User/IControllerCreate)
        ControllerCreate(useCase: IUseCaseCreate) implements IControllerCreate

Infrastructure(Frameworks & Drives)
  Database
    Memory()
      create(tableName: string, data: unknown): unknown

  Rest
    Contracts
      Express
        (IController from Applications/Controllers/ExpressRequest/Contracts/Commons/IController)
        IRouter{controller: IController}() extends ExpressRouter
          handle(ExpressRequest, ExpressResponse): void

  User
    (IUserEntity from Controllers/Web/Contracts/User/IEntity)
    IEntity extends IUserEntity

    (
      Memory = Infrastructure/Database/Memory
      IRepositoryCreate from Controllers/Web/Contracts/User/IRepositoryCreate
    )
    RepositoryCreateMemory(database: Memory) implements IRepositoryCreate
      handle(IEntity): IEntity

    (form Infrastructure/Rest/Contracts/Express/IRouter)
    RestRouterExpressCreate implements IRouter

Main
  AppExpress()
    handle(): void

