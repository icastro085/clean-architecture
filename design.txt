Entities
  Contracts
    IEntity{ id?: string }()
    IUser{ name: string }() extend IEntity

UseCases
  Contracts
    Commons
      IData() extend unknown

      (IEntity from Entities/Contracts/IEntity)
      IInput{entity: IEntity}()<IEntity>
        handle(): IEntity

      (IEntity from Entities/Contracts/IEntity)
      IOutput{entity: IEntity}()<IEntity, IData>
        handle(): IData

      (IEntity from Entities/Contracts/IEntity)
      IRepository()<INEntity, OUTEntity>
        handle(INEntity?): OUTEntity

      (IEntity from Entities/Contracts/IEntity)
      IUseCase{repository: IRepository<IEntity, IEntity>}()<IInput, IOutput>
        handle(IInput): IOutput

    User
      (IUser from Entities/Contracts/IUser)
      IEntity() extend IUser

      (ICommonsData from UseCases/Contracts/Commons/IData)
      IData() extend ICommonsData

      (ICommonsInput from UseCases/Contracts/Commons/IInput)
      IInpput() extend ICommonsInput<IEntity>

      (ICommonsOutput from UseCases/Contracts/Commons/IOutput)
      IOutput() extend ICommonsOutput<IEntity, IData>

      (IRepository from UseCases/Contracts/Commons/IRepository)
      IRepositoryCreate()
        <INEntity = IEntity, OUTEntity = IEntity>
          extend
            IRepository<INEntity, OUTEntity>

      (ICommonsUseCase from UseCases/Contracts/Commons/UseCase)
      IUseCaseCreate() extend ICommonsUseCase<IInpput, IOutput>

  User
    (
      IInpput from UseCases/Contracts/User/IInpput
      IEntity from UseCases/Contracts/User/IEntity
    )
    InputCreate(entity: IEntity) extend IInpput
      handle(): IEntity

    (
      IOutput from UseCases/Contracts/User/IOutput
      IEntity from UseCases/Contracts/User/IEntity
      IData from UseCases/Contracts/User/IData
    )
    OutputCreate(entity: IEntity) extend IOutput
      handle(): IData

    (
      IRepository from UseCases/Contracts/Commons/IRepository
      IEntity from UseCases/Contracts/User/IEntity
      IInput from UseCases/Contracts/User/IInput
      IOutput from UseCases/Contracts/User/IOutput
      IUseCaseCreate from UseCases/Contracts/User/UseCaseCreate
    )
    UseCaseCreate(OutputCreate, IRepository<IEntity, IEntity>) extend IUseCaseCreate
      handle(IInput): IOutput

Controllers
  Web
    Contracts
        Commons
          IHttpOutputData{status: number, data: any}()

          IHttpOutputError{status: number, messge: string}()

          IHttpOutput()
            handle(status: number, data: any): IHttpOutputData

          IHttpOutputError()
            handle(status: number, messge: string): IHttpOutputError

          IController()
            handle(any): IHttpOutputData | IHttpOutputError

        User
          (IUserEntity from UseCases/Contracts/User/IEntity)
          IEntity() extend IUserEntity

          (
            ICommonsHttpOutputData from Controllers/Web/Contracts/Commons/IHttpOutputData,
            IEntity from UseCases/Contracts/User/IEntity
          )
          IHttpOutpuData{data?: IEntity}() extend ICommonsHttpOutputData

          (
            ICommonsHttpOutput from Controllers/Web/Contracts/Commons/IHttpOutput
            IEntity from UseCases/Contracts/User/IEntity
          )
          IHttpOutput() extend ICommonsHttpOutput
            handle(status: number, data: IEntity): IHttpOutpuData

          (ICommonsHttpOutputError from Controllers/Web/Contracts/Commons/IHttpOutputError)
          IHttpOutputError() extend ICommonsHttpOutputError

          (IRepositoryCreate from UseCases/Contracts/User/IRepositoryCreate)
          IRepositoryCreate()
            <INEntity = IEntity, OUTEntity = IEntity>
              extend
                IRepositoryCreate<INEntity, OUTEntity>

          (
            IUseCaseCreate from UseCases/Contracts/User/UseCaseCreate
            ICommonsControllerfrom Controllers/Web/Contracts/Commons/IController
          )
          IController{
            useCase: IUseCaseCreate,
            repository: IRepositoryCreate
          }() extend ICommonsController
            handle(body: any): IHttpOutput | IHttpOutputError

    User
      (
        IController from Controllers/Web/Contracts/User/IController
        IRepositoryCreate from Controllers/Web/Contracts/User/IRepositoryCreate
      )
      Controller(
        useCase: IUseCaseCreate,
        repository: IRepositoryCreate
      ) extend IController

Frameworks & Drives
  Web
    Restful
      Contracts
        Express
          (IController from Controllers/Web/Contracts/Commons/IController)
          Router{controller: IController}() extend ExpressRouter
            handle(ExpressRequest, ExpressResponse): void

  User
    (IUserEntity from Controllers/Web/Contracts/User/IUserEntity)
    IEntity extend IUserEntity

    (IRepositoryCreate from Controllers/Web/Contracts/User/IRepositoryCreate)
    RepositoryCreateMemory() extend IRepositoryCreate
      handle(IEntity): IEntity

Main
  App()
    handle(): void

